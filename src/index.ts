import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { GoogleGenerativeAI, SchemaType } from "@google/generative-ai";
import { Buffer } from 'node:buffer'; // since cloudflare worker doesn't support Buffer they've built a polyfill for it so it works on edge

type Bindings = {
  MY_BUCKET: R2Bucket
  GOOGLE_API_KEY: string
  PUBLIC_URL: string
}

const app = new Hono<{ Bindings: Bindings }>()

// Add CORS middleware
app.use('*', cors({
  origin: '*', // change this to your api endpoint url to make it more secure
  allowMethods: ['POST', 'GET', 'OPTIONS'],
  allowHeaders: ['Content-Type'],
  exposeHeaders: ['Content-Length'],
  maxAge: 600,
  credentials: true,
}))

// Initialize Gemini Model
function initGeminiModel(apiKey: string) {
  console.log('ðŸš€ Initializing Gemini Model'); // Added log for debugging
  const genAI = new GoogleGenerativeAI(apiKey);
  const responseSchema: SchemaType = {
    type: "object",
    properties: {
      metadata: {
        type: "object",
        properties: {
          altText: {
            type: "string",
            description: "Text describing the content of the image"
          },
          description: {
            type: "string",
            description: "A more detailed explanation of the image, generated by AI or written manually"
          },
          tags: {
            type: "array",
            description: "List of tags related to the image",
            items: {
              type: "string"
            }
          },
          keywords: {
            type: "array",
            description: "List of keywords related to the image",
            items: {
              type: "string"
            }
          }
        }
      }
    }
  }
  return genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    generationConfig: {
      temperature: 0.4,
      topK: 32,
      topP: 1,
      maxOutputTokens: 4096,
      responseMimeType: "application/json",
      responseSchema: responseSchema
    }
  });
}

// Convert File to Base64
async function fileToGenerativePart(buffer: ArrayBuffer, mimeType: string) {
  console.log('ðŸ”„ Converting file to Base64'); // Added log for debugging
  return {
    inlineData: {
      data: Buffer.from(buffer).toString('base64'),
      mimeType
    }
  };
}

app.post("/upload", async (c) => {
  try {
    console.log('ðŸšš Processing upload request'); // Added log for debugging
    const formData = await c.req.formData();
    const file = formData.get('file') as File;

    if (!file) {
      console.error('ðŸš« No file uploaded'); // Added log for debugging
      return c.json({ error: "No file uploaded" }, 400);
    }

    // Check if file is an image
    if (!file.type.startsWith('image/')) {
      console.error('ðŸš« Only image files are allowed'); // Added log for debugging
      return c.json({ error: "Only image files are allowed" }, 400);
    }

    // Upload to R2
    const buffer = await file.arrayBuffer();
    const objectKey = `uploads/${Date.now()}_${file.name}`;
    await c.env.MY_BUCKET.put(objectKey, buffer, {
      httpMetadata: { contentType: file.type }
    });

    console.log('ðŸš€ File uploaded successfully'); // Added log for debugging

    // Get public URL. 
    const uploadedUrl = `${c.env.PUBLIC_URL}/${objectKey}`;

    // Process with Gemini
    const model = initGeminiModel(c.env.GOOGLE_API_KEY);
    const imagePart = await fileToGenerativePart(buffer, file.type);

    const result = await model.generateContent([
      "Describe this image in detail, focusing on key elements and any text visible in the image.",
      imagePart
    ]);
    const response = await result.response;
    const metadata = response.text

    console.log('ðŸš€ Gemini processing completed'); // Added log for debugging

    return c.json({
      success: true,
      url: uploadedUrl,
      metadata,
    });

  } catch (error) {
    console.error('ðŸš¨ Error processing upload:', error); // Added log for debugging
    return c.json({ 
      error: "Error processing file",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, 500);
  }
});

export default app